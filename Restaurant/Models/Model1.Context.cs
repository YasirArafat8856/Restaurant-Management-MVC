//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Restaurant.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MVC_RestaurantEntities : DbContext
    {
        public MVC_RestaurantEntities()
            : base("name=MVC_RestaurantEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Food_Order> Food_Order { get; set; }
        public virtual DbSet<Item> Items { get; set; }
    
        public virtual int Sp_ins_order(Nullable<int> cusId, Nullable<int> itemId, Nullable<int> quantity)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ins_order", cusIdParameter, itemIdParameter, quantityParameter);
        }
    
        public virtual int Sp_insBill(Nullable<int> ordId, string payMath)
        {
            var ordIdParameter = ordId.HasValue ?
                new ObjectParameter("ordId", ordId) :
                new ObjectParameter("ordId", typeof(int));
    
            var payMathParameter = payMath != null ?
                new ObjectParameter("PayMath", payMath) :
                new ObjectParameter("PayMath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_insBill", ordIdParameter, payMathParameter);
        }
    }
}
